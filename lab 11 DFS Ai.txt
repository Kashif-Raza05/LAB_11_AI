# Define the graph as an adjacency list
graph = {
    'A': ['B', 'C', 'E'],
    'B': ['D', 'E', 'A'],
    'C': ['F', 'G', 'A'],
    'D': ['B'],
    'E': ['A', 'B'],
    'F': ['C'],
    'G': ['C']
}

# Function to perform Depth First Search (DFS)
def dfs(graph, start, goal):
    open_list = [start]  # Stack to keep track of nodes to visit
    closed_list = []     # List to keep track of visited nodes

    print(f"{'Step':<10}{'Open List':<30}{'Closed List'}")
    step = 0

    while open_list:
        step += 1
        current_node = open_list.pop()  # Pop the last element (LIFO)
        closed_list.append(current_node)  # Add it to the closed list

        # Print the current state of open and closed lists
        print(f"{step:<10}{str(open_list):<30}{str(closed_list)}")

        # Check if the goal has been reached
        if current_node == goal:
            print("\nGoal reached!")
            return

        # Add neighbors of the current node to the open list if not already visited
        for neighbor in reversed(graph[current_node]):  # Reverse to maintain DFS order
            if neighbor not in closed_list and neighbor not in open_list:
                open_list.append(neighbor)

# Define initial and final states
initial_state = 'A'
final_state = 'G'

# Call DFS function
dfs(graph, initial_state, final_state)
