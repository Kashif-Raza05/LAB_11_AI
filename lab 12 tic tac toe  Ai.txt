import math
def has_moves_left(board):
    return any(cell == '_' for row in board for cell in row)

# Function to evaluate the current board state
def evaluate_board(board):
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != '_':
            return 10 if row[0] == 'X' else -10

    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != '_':
            return 10 if board[0][col] == 'X' else -10
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != '_':
        return 10 if board[0][0] == 'X' else -10
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != '_':
        return 10 if board[0][2] == 'X' else -10

    # If no winner, return 0
    return 0
def minimax(board, depth, is_maximizing):
    score = evaluate_board(board)

    # If a winner is found, return the score
    if score == 10 or score == -10:
        return score
    # If no moves are left, it's a draw
    if not has_moves_left(board):
        return 0
    # Maximizing player's move
    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = 'X'
                    best_score = max(best_score, minimax(board, depth + 1, False))
                    board[i][j] = '_'  # Undo the move
        return best_score
    # Minimizing player's move
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '_':
                    board[i][j] = 'O'
                    best_score = min(best_score, minimax(board, depth + 1, True))
                    board[i][j] = '_'  # Undo the move
        return best_score
# Function to find the best move for the AI
def find_best_move(board):
    best_score = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == '_':
                # Try the move
                board[i][j] = 'X'
                move_score = minimax(board, 0, False)
                board[i][j] = '_'  # Undo the move

                # Update the best move if a better score is found
                if move_score > best_score:
                    best_score = move_score
                    best_move = (i, j)
    return best_move
# Function to print the board
def print_board(board):
    for row in board:
        print(' '.join(row))
    print()
# Example board (X is AI, O is opponent)
board = [
    ['X', 'O', 'X'],
    ['_', 'O', '_'],
    ['_', '_', '_']
]
print("Initial Board:")
print_board(board)
# Find and display the best move for 'X'
best_move = find_best_move(board)
print(f"The best move for 'X' is at row {best_move[0]}, column {best_move[1]}.")

# Apply the move to the board
if best_move != (-1, -1):
    board[best_move[0]][best_move[1]] = 'X'D
print("Board after the best move:")
print_board(board)
